{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Travis Wade Documentation Wiki \uf0c1 How this site got started \uf0c1 MKDocs \uf0c1 For full documentation visit mkdocs.org . Footnotes \uf0c1 This is an example of a footnote 1 Where I host this \uf0c1 Netlify \uf0c1 I host this site completely on Netlify on a free account. But that also comes with custom domain, free HTTPS. Which is badass! There's no database to manage, just simple, flat files that I can write content using markdown, and one simple command that generates all static HTML files. Included documentation \uf0c1 Commands \uf0c1 mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout \uf0c1 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. A code block \uf0c1 A whole bunch of lines of code that should automatically be rendered correctly Details \uf0c1 Warning \uf0c1 A Warning Title This is a warning message The above was achieved with this code: /// details | A Warning Title type: warning This is a warning message /// Notes \uf0c1 A Notes Title This is a notes message The above was achieved with this code: /// details | A Notes Title type: note This is a notes message /// This is the description of the footnote itself. Which should render at the bottom of the page. For more reading, read here: python-markdown-extension-footnotes \u21a9","title":"Home"},{"location":"#travis-wade-documentation-wiki","text":"","title":"Travis Wade Documentation Wiki"},{"location":"#how-this-site-got-started","text":"","title":"How this site got started"},{"location":"#mkdocs","text":"For full documentation visit mkdocs.org .","title":"MKDocs"},{"location":"#footnotes","text":"This is an example of a footnote 1","title":"Footnotes"},{"location":"#where-i-host-this","text":"","title":"Where I host this"},{"location":"#netlify","text":"I host this site completely on Netlify on a free account. But that also comes with custom domain, free HTTPS. Which is badass! There's no database to manage, just simple, flat files that I can write content using markdown, and one simple command that generates all static HTML files.","title":"Netlify"},{"location":"#included-documentation","text":"","title":"Included documentation"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"#a-code-block","text":"A whole bunch of lines of code that should automatically be rendered correctly","title":"A code block"},{"location":"#details","text":"","title":"Details"},{"location":"#warning","text":"A Warning Title This is a warning message The above was achieved with this code: /// details | A Warning Title type: warning This is a warning message ///","title":"Warning"},{"location":"#notes","text":"A Notes Title This is a notes message The above was achieved with this code: /// details | A Notes Title type: note This is a notes message /// This is the description of the footnote itself. Which should render at the bottom of the page. For more reading, read here: python-markdown-extension-footnotes \u21a9","title":"Notes"},{"location":"about/","text":"About these docs \uf0c1 This documentation Wiki is a flat file, source controlled resource that's deployed with Netlify. For full documentation visit mkdocs.org .","title":"About"},{"location":"about/#about-these-docs","text":"This documentation Wiki is a flat file, source controlled resource that's deployed with Netlify. For full documentation visit mkdocs.org .","title":"About these docs"},{"location":"Ansible/","text":"Ansible \uf0c1 Disclaimer : This is not an all inclusive guide but more of a good starting point. I'd recommend you research and learn some on your own as much as you can. Some of these are geared towards Windows, but I'll do my best to discern between the environments whenever possible. Install Ansible \uf0c1 Disclaimer : Because I'm stubborn, and primarily a Windows Systems Admin, much of this environment is performed from a Windows machine. That said, I run Ansible scripts from a Linux subsystem in Windows. See getting Ubuntu for WSL for more information. Deployment machine (Ansible Host) \uf0c1 First, get Ansible installed. sudo apt-add-repository ppa:ansible/ansible sudo apt update sudo apt install ansible These are needed for using Ansible to configure Windows hosts. ansible-galaxy collection install ansible.windows ansible-galaxy collection install chocolatey.chocolatey apt-get install python3-pip pip install pywinrm[credssp] On Target Windows Hosts \uf0c1 Windows needs a bit of setup before it's Ansible friendly. # Collect some information and generate self-signed cert on host $hostName = $env:COMPUTERNAME $hostIP=(Get-NetAdapter| Get-NetIPAddress).IPv4Address|Out-String $srvCert = New-SelfSignedCertificate -DnsName $hostName,$hostIP -CertStoreLocation Cert:\\LocalMachine\\My $srvCert # Clean up existing WinRM listeners and create new HTTPS WinRM listener with new cert Get-ChildItem wsman:\\localhost\\Listener Get-ChildItem wsman:\\localhost\\Listener\\ | Where-Object -Property Keys -like 'Transport=HTTP*' | Remove-Item -Recurse New-Item -Path WSMan:\\localhost\\Listener\\ -Transport HTTPS -Address * -CertificateThumbPrint $srvCert.Thumbprint -Force # Create new FW rules New-NetFirewallRule -Displayname 'WinRM - Powershell remoting HTTPS-In' -Name 'WinRM - Powershell remoting HTTPS-In' -Profile Any -LocalPort 5986 -Protocol TCP # Restart WinRM Service Restart-Service WinRM # Create and export certificates New-Item -Path 'C:\\Certificates\\' -ItemType Directory Export-Certificate -Cert $srvCert -FilePath C:\\Certificates\\SSL_PS_Remoting.cer winrm set winrm/config/service '@{AllowUnencrypted=\"false\"}' winrm set winrm/config/client '@{AllowUnencrypted=\"false\"}' # Enable CredSSP Enable-WSManCredSSP -Role Server -Force","title":"Ansible"},{"location":"Ansible/#ansible","text":"Disclaimer : This is not an all inclusive guide but more of a good starting point. I'd recommend you research and learn some on your own as much as you can. Some of these are geared towards Windows, but I'll do my best to discern between the environments whenever possible.","title":"Ansible"},{"location":"Ansible/#install-ansible","text":"Disclaimer : Because I'm stubborn, and primarily a Windows Systems Admin, much of this environment is performed from a Windows machine. That said, I run Ansible scripts from a Linux subsystem in Windows. See getting Ubuntu for WSL for more information.","title":"Install Ansible"},{"location":"Ansible/#deployment-machine-ansible-host","text":"First, get Ansible installed. sudo apt-add-repository ppa:ansible/ansible sudo apt update sudo apt install ansible These are needed for using Ansible to configure Windows hosts. ansible-galaxy collection install ansible.windows ansible-galaxy collection install chocolatey.chocolatey apt-get install python3-pip pip install pywinrm[credssp]","title":"Deployment machine (Ansible Host)"},{"location":"Ansible/#on-target-windows-hosts","text":"Windows needs a bit of setup before it's Ansible friendly. # Collect some information and generate self-signed cert on host $hostName = $env:COMPUTERNAME $hostIP=(Get-NetAdapter| Get-NetIPAddress).IPv4Address|Out-String $srvCert = New-SelfSignedCertificate -DnsName $hostName,$hostIP -CertStoreLocation Cert:\\LocalMachine\\My $srvCert # Clean up existing WinRM listeners and create new HTTPS WinRM listener with new cert Get-ChildItem wsman:\\localhost\\Listener Get-ChildItem wsman:\\localhost\\Listener\\ | Where-Object -Property Keys -like 'Transport=HTTP*' | Remove-Item -Recurse New-Item -Path WSMan:\\localhost\\Listener\\ -Transport HTTPS -Address * -CertificateThumbPrint $srvCert.Thumbprint -Force # Create new FW rules New-NetFirewallRule -Displayname 'WinRM - Powershell remoting HTTPS-In' -Name 'WinRM - Powershell remoting HTTPS-In' -Profile Any -LocalPort 5986 -Protocol TCP # Restart WinRM Service Restart-Service WinRM # Create and export certificates New-Item -Path 'C:\\Certificates\\' -ItemType Directory Export-Certificate -Cert $srvCert -FilePath C:\\Certificates\\SSL_PS_Remoting.cer winrm set winrm/config/service '@{AllowUnencrypted=\"false\"}' winrm set winrm/config/client '@{AllowUnencrypted=\"false\"}' # Enable CredSSP Enable-WSManCredSSP -Role Server -Force","title":"On Target Windows Hosts"},{"location":"Downloads/","text":"Downloads \uf0c1 Here are a list of tools that I use all the time. And typically ones that I get installed right away. Chocolatey Much of the software below can be installed via Chocolatey FYI! Notepad++ or with chocolatey: choco install notepadplusplus 7zip or with chocolatey: choco install 7zip VSCode or with chocolatey: choco install vscode","title":"Downloads"},{"location":"Downloads/#downloads","text":"Here are a list of tools that I use all the time. And typically ones that I get installed right away. Chocolatey Much of the software below can be installed via Chocolatey FYI! Notepad++ or with chocolatey: choco install notepadplusplus 7zip or with chocolatey: choco install 7zip VSCode or with chocolatey: choco install vscode","title":"Downloads"},{"location":"Markdown/","text":"Markdown Tools \uf0c1 Online Markdown Editor Markdown Reference Sheet","title":"Markdown Tools"},{"location":"Markdown/#markdown-tools","text":"Online Markdown Editor Markdown Reference Sheet","title":"Markdown Tools"},{"location":"Netlify/","text":"About Netlify \uf0c1 Netlify is a kickass development tool. Essentially, it can take your existing repositories (I use Github for my personal projects), and can deploy, run builds and more. Which is all then served from their global CDN which is fast as hell! And all I have to do is commit and push my code to the repo. Netlify then deploys it. My Netlify Projects \uf0c1 Here are a few of my projects that are hosted on Netlify: This site! MKDocs My Links page (which is an open-source Linktree alternative): links.twade.io My CV site: cv.twade.io My custom URL shortener site which is basically just a really easy redirect tool: go.twade.io Online Markdown Editor: markdown.twade.io Some website on the internet. Yeah, it's dumb. But it's also one of my very first Netlify projects: somewebsiteontheinternet.com A very simple site that only says hello. Again, another dumb little project I wanted to build out: hello.twade.io An online book that I made for my children with some stories and other fun little things: storiesfromdaddy.com Fabric me this. My wife's link page (using the same open source one I mentioned in bullet 2 above) with a fully functional contact form: fabricmethis.com A super simple kids schedule. Not the most perfect, but looks nice on a TV in a common room that the children can reference for their daily schedule: kids.tandj.io Getting started on Netlify \uf0c1 Supported Git Providers \uf0c1","title":"Netlify"},{"location":"Netlify/#about-netlify","text":"Netlify is a kickass development tool. Essentially, it can take your existing repositories (I use Github for my personal projects), and can deploy, run builds and more. Which is all then served from their global CDN which is fast as hell! And all I have to do is commit and push my code to the repo. Netlify then deploys it.","title":"About Netlify"},{"location":"Netlify/#my-netlify-projects","text":"Here are a few of my projects that are hosted on Netlify: This site! MKDocs My Links page (which is an open-source Linktree alternative): links.twade.io My CV site: cv.twade.io My custom URL shortener site which is basically just a really easy redirect tool: go.twade.io Online Markdown Editor: markdown.twade.io Some website on the internet. Yeah, it's dumb. But it's also one of my very first Netlify projects: somewebsiteontheinternet.com A very simple site that only says hello. Again, another dumb little project I wanted to build out: hello.twade.io An online book that I made for my children with some stories and other fun little things: storiesfromdaddy.com Fabric me this. My wife's link page (using the same open source one I mentioned in bullet 2 above) with a fully functional contact form: fabricmethis.com A super simple kids schedule. Not the most perfect, but looks nice on a TV in a common room that the children can reference for their daily schedule: kids.tandj.io","title":"My Netlify Projects"},{"location":"Netlify/#getting-started-on-netlify","text":"","title":"Getting started on Netlify"},{"location":"Netlify/#supported-git-providers","text":"","title":"Supported Git Providers"},{"location":"Powershell/","text":"Powershell \uf0c1 Some boiler plate text. Section 1 \uf0c1 Section 2 \uf0c1 Section 3 \uf0c1","title":"Powershell"},{"location":"Powershell/#powershell","text":"Some boiler plate text.","title":"Powershell"},{"location":"Powershell/#section-1","text":"","title":"Section 1"},{"location":"Powershell/#section-2","text":"","title":"Section 2"},{"location":"Powershell/#section-3","text":"","title":"Section 3"},{"location":"Windows/","text":"Windows \uf0c1 Some boiler plate text. Section 1 \uf0c1 Section 2 \uf0c1 Section 3 \uf0c1","title":"Windows"},{"location":"Windows/#windows","text":"Some boiler plate text.","title":"Windows"},{"location":"Windows/#section-1","text":"","title":"Section 1"},{"location":"Windows/#section-2","text":"","title":"Section 2"},{"location":"Windows/#section-3","text":"","title":"Section 3"}]}